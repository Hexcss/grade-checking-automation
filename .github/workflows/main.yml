name: Check PR Structure

on:
  pull_request:
    branches:
      - reto-002
    types:
      - opened
      - synchronize

jobs:
  check-structure:
    runs-on: ubuntu-latest

    outputs:
      pr-title-and-body: ${{ steps.pr-title-and-body.outputs.ERROR_MESSAGE }}
      ide-specific-files: ${{ steps.ide-specific-files.outputs.ERROR_MESSAGE}}
      folder-structure: ${{ steps.folder-structure.outputs.valid.ERROR_MESSAGE }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2

      # Security check
    - name: Check repository
      run: |
        if [[ "$GITHUB_REPOSITORY" != "Hexcss/personal-grade-checking-automation" ]]; then
          echo "This workflow only runs on the original repository."
          exit 1
        fi

    - name: Check for unauthorized changes
      run: |
        git fetch origin master:master
        CHANGED_FILES=$(git diff --name-only origin/master..HEAD)
        if echo "$CHANGED_FILES" | grep -q "^\.github/workflows/"; then
          echo "Unauthorized changes detected in workflow files!"
          exit 1
        fi

      # Structure check
    - name: Check PR title and body
      id: pr-title-and-body
      run: |
        ERROR_MESSAGE=""
        if [ -z "${{ github.event.pull_request.title }}" ] || [ -z "${{ github.event.pull_request.body }}" ]; then
          ERROR_MESSAGE+="PR title or body is empty.\n"
        fi
        echo "ERROR_MESSAGE=$ERROR_MESSAGE" >> $GITHUB_OUTPUT

    - name: Check for IDE-specific config files
      id: ide-specific-files
      run: |
        ERROR_MESSAGE=""
        banned_files=("*.idea" "*.vscode" "*.eclipse")
        for file in "${banned_files[@]}"
        do
          if [ -e "$file" ]; then
            ERROR_MESSAGE+="IDE-specific config file $file found.\n"
          fi
        done
        echo "ERROR_MESSAGE=$ERROR_MESSAGE" >> $GITHUB_OUTPUT

    - name: Check folder structure
      id: folder-structure
      run: |
        ERROR_MESSAGE=""
        if [ ! -d "entragas" ]; then
          ERROR_MESSAGE+="entragas folder is missing.\n"
        fi
        camel_case_folders=$(find . -type d -regex "./[a-z]+([A-Z][a-z]+)+")
        if [ -z "$camel_case_folders" ]; then
          ERROR_MESSAGE+="No folder with student name found.\n"
        fi
        for folder in $camel_case_folders
        do
          if [ ! -d "$folder/reto-002" ]; then
            ERROR_MESSAGE+="reto-002 folder is missing inside $folder.\n"
          fi
          if [ ! -e "$folder/reto-002/README.md" ]; then
            ERROR_MESSAGE+="README.md file is missing inside $folder/reto-002.\n"
          fi
        done
        echo "ERROR_MESSAGE=$ERROR_MESSAGE" >> $GITHUB_OUTPUT


  notify-issue:
    needs: check-structure
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_TITLE_AND_BODY: ${{ needs.check-structure.outputs.pr-title-and-body }}
      IDE_SPECIFIC_FILES: ${{ needs.check-structure.outputs.ide-specific-files }}
      FOLDER_STRUCTURE: ${{ needs.check-structure.outputs.folder-structure }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh
  
      - name: Create an issue in the repository if there are errors
        if: >-
          env.PR_TITLE_AND_BODY != '' ||
          env.IDE_SPECIFIC_FILES != '' ||
          env.FOLDER_STRUCTURE != ''
        run: |
          errorMessages=()
          [[ -n "$PR_TITLE_AND_BODY" ]] && errorMessages+=("PR Title and Body: $PR_TITLE_AND_BODY")
          [[ -n "$IDE_SPECIFIC_FILES" ]] && errorMessages+=("IDE-specific files: $IDE_SPECIFIC_FILES")
          [[ -n "$FOLDER_STRUCTURE" ]] && errorMessages+=("Folder Structure: $FOLDER_STRUCTURE")
          
          if [ ${#errorMessages[@]} -gt 0 ]; then
            issueTitle="Error in PR #$PR_NUMBER"
            issueBody="The following errors were found in PR #$PR_NUMBER:\n${errorMessages[*]}"
            echo "$issueBody" | gh issue create -t "$issueTitle" -b -
          fi

        
