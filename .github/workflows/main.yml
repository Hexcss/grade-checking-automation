name: Check PR Structure

on:
  pull_request:
    branches:
      - reto-002
    types:
      - opened
      - synchronize

jobs:
  check-structure:
    runs-on: ubuntu-latest

    outputs:
      pr-title-and-body: ${{ steps.pr-title-and-body.outputs.ERROR_MESSAGE }}
      ide-specific-files: ${{ steps.ide-specific-files.outputs.ERROR_MESSAGE }}
      folder-structure: ${{ steps.folder-structure.outputs.ERROR_MESSAGE }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Security check
      - name: Check repository
        run: |
          if [[ "$GITHUB_REPOSITORY" != "Hexcss/personal-grade-checking-automation" ]]; then
            echo "This workflow only runs on the original repository."
            exit 1
          fi

      # Structure check
      - name: Check PR title and body
        id: pr-title-and-body
        run: |
          ERROR_MESSAGE=""
          if [ -z "${{ github.event.pull_request.title }}" ] || [ -z "${{ github.event.pull_request.body }}" ]; then
            ERROR_MESSAGE+="PR title or body is empty.\n"
          fi
          echo "ERROR_MESSAGE=$ERROR_MESSAGE" >> "$GITHUB_OUTPUT"

      - name: Check for IDE-specific config files
        id: ide-specific-files
        run: |
          ERROR_MESSAGE=""
          banned_files=(".idea" ".vscode" ".eclipse")
          for pattern in "${banned_files[@]}"
          do
            # Find files matching the pattern
            files=$(find . -name "$pattern" -print)
            if [ ! -z "$files" ]; then
              ERROR_MESSAGE+="IDE-specific config files found: $files.\n"
            fi
          done
          if [ ! -z "$ERROR_MESSAGE" ]; then
            echo "ERROR_MESSAGE=$ERROR_MESSAGE" >> "$GITHUB_OUTPUT"
          fi

      - name: Check folder structure
        id: folder-structure
        run: |
          ERROR_MESSAGE=""
          if [ ! -d "entregas" ]; then
            ERROR_MESSAGE+="entregas folder is missing.\n"
          else
            cd entregas
            camel_case_folders=$(find . -mindepth 1 -maxdepth 1 -type d -regextype posix-extended -regex "./[a-z]+([A-Z][a-z]+)+")
            cd ..
            if [ -z "$camel_case_folders" ]; then
              ERROR_MESSAGE+="No folder with student name found in entregas.\n"
            else
              for folder in $camel_case_folders
              do
                if [ ! -d "$folder/reto-002" ]; then
                  ERROR_MESSAGE+="reto-002 folder is missing inside $folder.\n"
                fi
                if [ ! -e "$folder/reto-002/README.md" ]; then
                  ERROR_MESSAGE+="README.md file is missing inside $folder/reto-002.\n"
                fi
              done
            fi
          fi
          echo "ERROR_MESSAGE=$ERROR_MESSAGE" >> "$GITHUB_OUTPUT"

  notify-issue-if-errors-found:
    needs: check-structure
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_TITLE_AND_BODY: ${{ needs.check-structure.outputs.pr-title-and-body }}
      IDE_SPECIFIC_FILES: ${{ needs.check-structure.outputs.ide-specific-files }}
      FOLDER_STRUCTURE: ${{ needs.check-structure.outputs.folder-structure }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      API_ENDPOINT: https://shfs5frz-9000.use.devtunnels.ms/create-issue
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create an issue in the repository if there are errors
        if: >-
          env.PR_TITLE_AND_BODY != '' ||
          env.IDE_SPECIFIC_FILES != '' ||
          env.FOLDER_STRUCTURE != ''
        run: |
          errorMessages=()
          labelsArray=()
          [[ -n "$PR_TITLE_AND_BODY" ]] && errorMessages+=("PR Title and Body: $PR_TITLE_AND_BODY")
          [[ -n "$IDE_SPECIFIC_FILES" ]] && errorMessages+=("IDE-specific files: $IDE_SPECIFIC_FILES")
          [[ -n "$FOLDER_STRUCTURE" ]] && errorMessages+=("Folder Structure: $FOLDER_STRUCTURE")
          labelsArray+=("Error de estructura")

          if [ ${#errorMessages[@]} -gt 0 ]; then
            issueTitle="Error in PR #$PR_NUMBER by @${PR_AUTHOR}"
            issueBody="${errorMessages[*]}"

            labelsJson=$(printf '%s\n' "${labelsArray[@]}" | jq -R . | jq -s .)

            curl -X POST "$API_ENDPOINT"\
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
              -d "{\"title\":\"$issueTitle\", \"body\":\"$issueBody\", \"owner\":\"Hexcss\", \"repo\":\"personal-grade-checking-automation\", \"labels\":$labelsJson}"
          fi

  prevent-merge-if-errors:
    needs: check-structure
    runs-on: ubuntu-latest
    if: >-
      needs.check-structure.outputs.pr-title-and-body != '' ||
      needs.check-structure.outputs.ide-specific-files != '' ||
      needs.check-structure.outputs.folder-structure != ''
    steps:
      - name: Block merge
        run: |
          echo "Errors were found during the structure checks. Merge is blocked."
          exit 1
